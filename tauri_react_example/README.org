* Tauri + React + Typescript
:PROPERTIES:
:CUSTOM_ID: tauri-react-typescript
:END:
This template should help get you started developing with Tauri, React
and Typescript in Vite.

** Recommended IDE Setup
:PROPERTIES:
:CUSTOM_ID: recommended-ide-setup
:END:
- [[https://code.visualstudio.com/][VS Code]] +
  [[https://marketplace.visualstudio.com/items?itemName=tauri-apps.tauri-vscode][Tauri]]
  +
  [[https://marketplace.visualstudio.com/items?itemName=rust-lang.rust-analyzer][rust-analyzer]]

#+begin_src shell
bun create tauri-app
✔ Project name · tauri_react_example
✔ Identifier · com.tauri_react_example.app
✔ Choose which language to use for your frontend · TypeScript / JavaScript - (pnpm, yarn, npm, deno, bun)
✔ Choose your package manager · bun
✔ Choose your UI template · React - (https://react.dev/)
✔ Choose your UI flavor · TypeScript

Template created! To get started run:
  cd tauri_react_example
  bun install
  bun run tauri android init
  bun run tauri ios init

For Desktop development, run:
  bun run tauri dev

For Android development, run:
  bun run tauri android dev

For iOS development, run:
  bun run tauri ios dev
#+end_src

** add tailwind 4

see [[https://tailwindcss.com/docs/installation/using-vite][Get started with Tailwind CSS]]

** tanstack router

#+begin_src shell
bun add @tanstack/react-router
#+end_src

see [[https://zenn.dev/rudolf_aion/articles/e9ad2c68ad9e7e][ReactRouterからTanstackに変えたら...サイズが増えた]]

** Manual Setup tanstack router

#+begin_src shell
bun add @tanstack/react-router
bun add -D @tanstack/router-plugin @tanstack/react-router-devtools
#+end_src

copy from [[https://tanstack.com/router/latest/docs/framework/react/quick-start][Quick Start]]

** some doc reference

https://sorrycc.com/introducing-tanstack-router
https://frontendmasters.com/blog/introducing-tanstack-router/
https://github.com/arackaf/tanstack-router-routing-demo

** add HTTP Client

#+begin_src shell
bun tauri add http
#+end_src

** after adding http client, build and run

#+begin_src shell
bun run tauri dev
#+end_src

** tauri ios development

#+begin_src shell
export APPLE_DEVELOPMENT_TEAM="XXXX"
# enable network proxy, might use proxy to download some dependencies and compile
bun tauri ios init
bun tauri ios dev
$ tauri ios dev
/opt/homebrew/bin/ios-deploy
Info package `ios-deploy` present: true
Detected iOS simulators:
[0] iPad (A16) (iOS 18.4)
[1] iPad Air 11-inch (M3) (iOS 18.4)
[2] iPad Air 13-inch (M3) (iOS 18.4)
[3] iPad Pro 11-inch (M4) (iOS 18.4)
[4] iPad Pro 13-inch (M4) (iOS 18.4)
[5] iPad mini (A17 Pro) (iOS 18.4)
[6] iPhone 16 (iOS 18.4)
[7] iPhone 16 Plus (iOS 18.4)
[8] iPhone 16 Pro (iOS 18.4)
[9] iPhone 16 Pro Max (iOS 18.4)
[10] iPhone 16e (iOS 18.4)
Enter an index for a simulator above.
Simulator: 6
#+end_src

copy from [[https://qiita.com/aqua_ix/items/d8d0c373df074fc599fc][Tauri でモバイルアプリをビルドする]]

*** Fix Bundle Identifier for iOS
:PROPERTIES:
:CUSTOM_ID: fix-bundle-identifier
:END:

When running the iOS app, we encountered this error:
#+begin_quote shell
warning: invalid character in Bundle Identifier. This string must be a uniform type identifier (UTI) that contains only alphanumeric (A-Z,a-z,0-9), hyphen (-), and period (.) characters.
An error was encountered processing the command (domain=FBSOpenApplicationServiceErrorDomain, code=4):
Simulator device failed to launch com.tauri-react-example.app.
#+end_quote

*** The Solution

Needed to update the bundle identifier format to follow Apple's requirements (no hyphens between segments):

**** Changes in tauri.conf.json:
#+begin_quote diff
- "identifier": "com.tauri_react_example.app",
+ "identifier": "com.tauri.react.example.app",
#+end_quote

**** Changes in project.yml:
#+begin_quote diff
options:
-  bundleIdPrefix: com.tauri-react-example.app
+  bundleIdPrefix: com.tauri.react.example

settingGroups:
  app:
    base:
      PRODUCT_NAME: tauri_react_example
-     PRODUCT_BUNDLE_IDENTIFIER: com.tauri-react-example.app
+     PRODUCT_BUNDLE_IDENTIFIER: com.tauri.react.example.app
#+end_quote

*** After fixing the bundle ID, rebuild with:
#+begin_src shell
bun tauri ios dev
#+end_src

** Three.js with Physics using Cannon-es
:PROPERTIES:
:CUSTOM_ID: threejs-physics
:END:

This project includes 3D physics simulation capabilities using Three.js for rendering and Cannon-es for physics.

*** Installation
#+begin_src shell
# Install Three.js
bun add three
bun add -D @types/three

# Install Cannon-es physics engine
bun add cannon-es
bun add -D @types/cannon

# Optional debugging tools
bun add -D cannon-es-debugger lil-gui
#+end_src

*** Implementation Guide

Based on [[https://zenn.dev/thirdlf/articles/06-zenn-threejs-cannon][Physics Simulation with Three.js and Cannon]], we created a physics scene component that:

1. Sets up a Three.js scene with renderer, camera, and lighting
2. Creates a Cannon.js physics world with gravity
3. Creates visual meshes (Three.js) and corresponding physics bodies (Cannon-es)
4. Synchronizes the positions and rotations of visual objects with physics bodies
5. Implements an animation loop to update physics and render frames

*** Code Example

A basic physics scene where objects fall and collide:

#+begin_src typescript
// Create a scene, camera, renderer
const scene = new THREE.Scene();
const camera = new THREE.PerspectiveCamera(75, window.innerWidth/window.innerHeight, 0.1, 1000);
const renderer = new THREE.WebGLRenderer();

// Create a physics world
const world = new CANNON.World({
  gravity: new CANNON.Vec3(0, -9.82, 0)
});

// Create a box mesh (visual)
const boxGeometry = new THREE.BoxGeometry(1, 1, 1);
const boxMaterial = new THREE.MeshStandardMaterial({color: 0x44aaff});
const boxMesh = new THREE.Mesh(boxGeometry, boxMaterial);
scene.add(boxMesh);

// Create a box physics body
const boxBody = new CANNON.Body({
  mass: 1,
  shape: new CANNON.Box(new CANNON.Vec3(0.5, 0.5, 0.5)),
  position: new CANNON.Vec3(0, 5, 0)
});
world.addBody(boxBody);

// Animation loop
function animate() {
  requestAnimationFrame(animate);

  // Step the physics world
  world.step(1/60);

  // Update mesh position to match physics body
  boxMesh.position.copy(boxBody.position);
  boxMesh.quaternion.copy(boxBody.quaternion);

  renderer.render(scene, camera);
}
animate();
#+end_src

*** Notes and Best Practices

- Always dispose of Three.js geometries and materials when unmounting components
- Use requestAnimationFrame for smooth animations
- Handle window resize events to maintain proper aspect ratio
- For better performance, reuse geometries and materials when creating multiple objects
- Add proper lighting for materials that require it (e.g., MeshStandardMaterial)

** Data Visualization with Recharts
:PROPERTIES:
:CUSTOM_ID: data-visualization
:END:

This project uses Recharts to create interactive and responsive charts for data visualization within a Tauri application.

*** Installation and Setup
#+begin_src shell
# Install Recharts library
bun add recharts
#+end_src

*** Available Chart Types

The application includes several chart types:

**** Histogram & Waterfall Charts
- Used to represent data distribution across categories
- Supports both stacked and unstacked histogram representations
- Includes interactive tooltips for data inspection

**** Candlestick Charts (K-Line)
- Financial stock price visualization
- Shows OHLC (Open-High-Low-Close) price data
- Includes moving averages (MA5, MA20)
- Features volume data visualization
- Provides detailed tabular data with sorting and pagination

*** Data Table Features
- Sortable columns (click on column headers)
- Pagination with adjustable page size
- Color-coded values for improved readability
  - Green: positive changes (price increases)
  - Red: negative changes (price decreases)
- Statistical summaries and key metrics

*** Implementation Example

#+begin_src typescript
import { BarChart, Bar, XAxis, YAxis, Tooltip } from 'recharts';

// Component example for basic chart
function BasicChart({ data }) {
  return (
    <div style={{ width: '100%', height: 400 }}>
      <ResponsiveContainer>
        <BarChart data={data}>
          <CartesianGrid strokeDasharray="3 3" />
          <XAxis dataKey="name" />
          <YAxis />
          <Tooltip />
          <Bar dataKey="value" fill="#8884d8" />
        </BarChart>
      </ResponsiveContainer>
    </div>
  );
}
#+end_src

*** Best Practices

- Use ResponsiveContainer to ensure charts resize properly
- Provide clear tooltips for better user experience
- Add proper legends and labels for data interpretation
- Consider color schemes for data representation (red/green for financial data)
- Consider accessibility in chart design (color choices, text size)
- Optimize for performance with large datasets
- When using real-time data, implement efficient update mechanisms

*** Additional Resources

- [[https://recharts.org/en-US][Recharts Documentation]]
- [[https://recharts.org/en-US/examples][Recharts Examples]]
- [[https://www.smashingmagazine.com/2020/03/creating-charts-react-recharts/][Creating Charts with React and Recharts]]

** React Three Fiber Integration
:PROPERTIES:
:CUSTOM_ID: react-three-fiber
:END:

This project integrates React Three Fiber (R3F), a React renderer for Three.js that makes it easier to build 3D scenes using React's component pattern.

*** Installation
#+begin_src shell
# Install React Three Fiber and helpers
bun add @react-three/fiber @react-three/drei

# Three.js should already be installed
# If not, add it with: bun add three
#+end_src

*** Key Features of React Three Fiber

- *Declarative Approach:* Use React components to define 3D elements
- *Automatic Resource Management:* Handles disposal of Three.js objects
- *React Integration:* Seamlessly works with React states, props, and hooks
- *Optimized Performance:* Efficient rendering with automatic batching
- *Simplified Physics Integration:* Easier integration with physics engines

*** Implementation Example

A basic React Three Fiber scene with interactive elements:

#+begin_src typescript
import { Canvas, useFrame } from '@react-three/fiber'
import { OrbitControls } from '@react-three/drei'
import { useRef, useState } from 'react'
import * as THREE from 'three'

function Box(props) {
  // Reference to the mesh
  const meshRef = useRef()
  
  // State for interaction
  const [hovered, setHover] = useState(false)
  const [active, setActive] = useState(false)
  
  // Run on every frame
  useFrame((state, delta) => {
    meshRef.current.rotation.x += delta * 0.5
    meshRef.current.rotation.y += delta * 0.2
  })
  
  return (
    <mesh
      {...props}
      ref={meshRef}
      scale={active ? 1.5 : 1}
      onClick={() => setActive(!active)}
      onPointerOver={() => setHover(true)}
      onPointerOut={() => setHover(false)}>
      <boxGeometry args={[1, 1, 1]} />
      <meshStandardMaterial color={hovered ? 'hotpink' : 'orange'} />
    </mesh>
  )
}

function App() {
  return (
    <Canvas>
      <ambientLight intensity={0.5} />
      <spotLight position={[10, 10, 10]} angle={0.15} penumbra={1} />
      <pointLight position={[-10, -10, -10]} />
      <Box position={[-1.2, 0, 0]} />
      <Box position={[1.2, 0, 0]} />
      <OrbitControls />
    </Canvas>
  )
}
#+end_src

*** Using R3F with Tauri

1. *Performance Considerations:* 
   - Tauri apps run on native WebView, which typically has good WebGL support
   - Use performance optimizations like instancing for complex scenes

2. *Mobile Support:*
   - For iOS/Android Tauri apps, check WebGL compatibility
   - Consider implementing fallbacks for devices with limited 3D support

3. *Integration with Native Features:*
   - R3F can be combined with Tauri's Rust backend for data processing
   - Use Tauri commands to handle heavy computations that feed into 3D visualizations

*** Comparison with Vanilla Three.js

| Aspect           | React Three Fiber                              | Vanilla Three.js                       |
|------------------+-----------------------------------------------+---------------------------------------|
| Syntax           | React components (declarative)                | Imperative API calls                  |
| State Management | React hooks and props                         | Manual state tracking                 |
| Cleanup          | Automatic disposal                            | Manual disposal required              |
| Learning Curve   | Easy for React developers                     | Steeper for those new to 3D graphics  |
| Performance      | Good with proper optimizations                | Potentially better for complex scenes |

*** Additional Resources

- [[https://docs.pmnd.rs/react-three-fiber/getting-started/introduction][React Three Fiber Documentation]]
- [[https://github.com/pmndrs/drei][React Three Drei (Helpers)]]
- [[https://threejs-journey.com/][Three.js Journey Course]]
- [[https://github.com/pmndrs/gltfjsx][GLTFJSX - Convert 3D models to JSX components]]
- [[https://codesandbox.io/examples/package/@react-three/fiber][Example Projects on CodeSandbox]]