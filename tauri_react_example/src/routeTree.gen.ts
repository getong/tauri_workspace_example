/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from "./routes/__root";
import { Route as ServerImport } from "./routes/server";
import { Route as RustrequestImport } from "./routes/rust_request";
import { Route as R3fImport } from "./routes/r3f";
import { Route as DataImport } from "./routes/data";
import { Route as ConfigImport } from "./routes/config";
import { Route as ChartsImport } from "./routes/charts";
import { Route as AboutImport } from "./routes/about";
import { Route as IndexImport } from "./routes/index";

// Create/Update Routes

const ServerRoute = ServerImport.update({
  id: "/server",
  path: "/server",
  getParentRoute: () => rootRoute,
} as any);

const RustrequestRoute = RustrequestImport.update({
  id: "/rust_request",
  path: "/rust_request",
  getParentRoute: () => rootRoute,
} as any);

const R3fRoute = R3fImport.update({
  id: "/r3f",
  path: "/r3f",
  getParentRoute: () => rootRoute,
} as any);

const DataRoute = DataImport.update({
  id: "/data",
  path: "/data",
  getParentRoute: () => rootRoute,
} as any);

const ConfigRoute = ConfigImport.update({
  id: "/config",
  path: "/config",
  getParentRoute: () => rootRoute,
} as any);

const ChartsRoute = ChartsImport.update({
  id: "/charts",
  path: "/charts",
  getParentRoute: () => rootRoute,
} as any);

const AboutRoute = AboutImport.update({
  id: "/about",
  path: "/about",
  getParentRoute: () => rootRoute,
} as any);

const IndexRoute = IndexImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => rootRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/": {
      id: "/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof IndexImport;
      parentRoute: typeof rootRoute;
    };
    "/about": {
      id: "/about";
      path: "/about";
      fullPath: "/about";
      preLoaderRoute: typeof AboutImport;
      parentRoute: typeof rootRoute;
    };
    "/charts": {
      id: "/charts";
      path: "/charts";
      fullPath: "/charts";
      preLoaderRoute: typeof ChartsImport;
      parentRoute: typeof rootRoute;
    };
    "/config": {
      id: "/config";
      path: "/config";
      fullPath: "/config";
      preLoaderRoute: typeof ConfigImport;
      parentRoute: typeof rootRoute;
    };
    "/data": {
      id: "/data";
      path: "/data";
      fullPath: "/data";
      preLoaderRoute: typeof DataImport;
      parentRoute: typeof rootRoute;
    };
    "/r3f": {
      id: "/r3f";
      path: "/r3f";
      fullPath: "/r3f";
      preLoaderRoute: typeof R3fImport;
      parentRoute: typeof rootRoute;
    };
    "/rust_request": {
      id: "/rust_request";
      path: "/rust_request";
      fullPath: "/rust_request";
      preLoaderRoute: typeof RustrequestImport;
      parentRoute: typeof rootRoute;
    };
    "/server": {
      id: "/server";
      path: "/server";
      fullPath: "/server";
      preLoaderRoute: typeof ServerImport;
      parentRoute: typeof rootRoute;
    };
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  "/": typeof IndexRoute;
  "/about": typeof AboutRoute;
  "/charts": typeof ChartsRoute;
  "/config": typeof ConfigRoute;
  "/data": typeof DataRoute;
  "/r3f": typeof R3fRoute;
  "/rust_request": typeof RustrequestRoute;
  "/server": typeof ServerRoute;
}

export interface FileRoutesByTo {
  "/": typeof IndexRoute;
  "/about": typeof AboutRoute;
  "/charts": typeof ChartsRoute;
  "/config": typeof ConfigRoute;
  "/data": typeof DataRoute;
  "/r3f": typeof R3fRoute;
  "/rust_request": typeof RustrequestRoute;
  "/server": typeof ServerRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  "/": typeof IndexRoute;
  "/about": typeof AboutRoute;
  "/charts": typeof ChartsRoute;
  "/config": typeof ConfigRoute;
  "/data": typeof DataRoute;
  "/r3f": typeof R3fRoute;
  "/rust_request": typeof RustrequestRoute;
  "/server": typeof ServerRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | "/"
    | "/about"
    | "/charts"
    | "/config"
    | "/data"
    | "/r3f"
    | "/rust_request"
    | "/server";
  fileRoutesByTo: FileRoutesByTo;
  to:
    | "/"
    | "/about"
    | "/charts"
    | "/config"
    | "/data"
    | "/r3f"
    | "/rust_request"
    | "/server";
  id:
    | "__root__"
    | "/"
    | "/about"
    | "/charts"
    | "/config"
    | "/data"
    | "/r3f"
    | "/rust_request"
    | "/server";
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  AboutRoute: typeof AboutRoute;
  ChartsRoute: typeof ChartsRoute;
  ConfigRoute: typeof ConfigRoute;
  DataRoute: typeof DataRoute;
  R3fRoute: typeof R3fRoute;
  RustrequestRoute: typeof RustrequestRoute;
  ServerRoute: typeof ServerRoute;
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  ChartsRoute: ChartsRoute,
  ConfigRoute: ConfigRoute,
  DataRoute: DataRoute,
  R3fRoute: R3fRoute,
  RustrequestRoute: RustrequestRoute,
  ServerRoute: ServerRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/charts",
        "/config",
        "/data",
        "/r3f",
        "/rust_request",
        "/server"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/charts": {
      "filePath": "charts.tsx"
    },
    "/config": {
      "filePath": "config.tsx"
    },
    "/data": {
      "filePath": "data.tsx"
    },
    "/r3f": {
      "filePath": "r3f.tsx"
    },
    "/rust_request": {
      "filePath": "rust_request.tsx"
    },
    "/server": {
      "filePath": "server.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
